{"version":3,"sources":["components/contact-us.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["ContactUs","ev","preventDefault","className","onSubmit","this","handleSubmit","bind","type","required","id","placeholder","name","value","React","Component","Home","props","handleForce","data","fileData","splice","length","headingData","reduce","a","b","concat","setState","csvData","itemsPerPage","state","activePage","pageNumber","startingIndex","completeData","dataToExport","csvContent","forEach","rowArray","row","join","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","rowIndex","colIndex","target","innerHTML","index","cssClass","onFileLoaded","onClick","handleExport","map","item","i","key","scope","res","suppressContentEditableWarning","contentEditable","onInput","handleDataChange","handleDelete","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","onChange","handlePageChange","App","basename","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2518fbf.chunk.js","sourcesContent":["import React from 'react'\n\n\nexport default class ContactUs extends React.Component {\n    handleSubmit(ev){\n        ev.preventDefault()\n    }\n    render() {\n        return (\n            <div className=\"bg-dark contact-form-bg pt-md-5 p-sm-3 p-3\">\n                <h1>Contact Us</h1>\n                <form className=\"cf\" onSubmit={this.handleSubmit.bind(this)}>\n                    <div className=\"half left cf\">\n                        <input type=\"text\" required id=\"input-name\" placeholder=\"Name\" />\n                        <input type=\"email\" required id=\"input-email\" placeholder=\"Email address\" />\n                        <input type=\"date\" required id=\"input-dob\" placeholder=\"dob\" />\n                    </div>\n                    <div className=\"half right cf\">\n                        <input type=\"tel\" required id=\"input-phone\" placeholder=\"Phone number\" />\n                        <textarea name=\"address\" type=\"text\" required id=\"input-address\" placeholder=\"address\"></textarea>\n                    </div>\n                    <input type=\"submit\" value=\"Submit\" required id=\"input-submit\" />\n                </form>\n            </div>\n        )\n    }\n}","\nimport React, { Component } from 'react';\nimport CSVReader from 'react-csv-reader'\nimport Pagination from \"react-js-pagination\";\n\n\nclass Home extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            csvData: [],\n            activePage: 1\n        };\n        this.headingData = []\n        this.fileData = []\n        this.itemsPerPage = 15\n    }\n\n    handlePageChange(pageNumber) {\n        let startingIndex = (pageNumber - 1) * this.itemsPerPage\n        let completeData = [...this.fileData]\n        this.setState({\n            activePage: pageNumber,\n            csvData: completeData.splice(startingIndex, this.itemsPerPage)\n        });\n\n    }\n\n    handleForce = data => {\n        let fileData = data.splice(0, 1);\n        if (fileData.length > 0) {\n            this.headingData = fileData.reduce((a, b) => {\n                return a.concat(b);\n            }, []);\n        }\n        this.fileData = [...data]\n        this.setState({\n            csvData: data.splice(0, this.itemsPerPage)\n        })\n    };\n\n    handleExport() {\n        let dataToExport = [this.headingData, ...this.state.csvData]\n        let csvContent = \"data:text/csv;charset=utf-8,\";\n        dataToExport.forEach(function (rowArray) {\n            let row = rowArray.join(\",\");\n            csvContent += row + \"\\r\\n\";\n        });\n        var encodedUri = encodeURI(csvContent);\n        var link = document.createElement(\"a\");\n        link.setAttribute(\"href\", encodedUri);\n        link.setAttribute(\"download\", \"my_data.csv\");\n        document.body.appendChild(link);\n        link.click();\n    }\n\n    handleDataChange(rowIndex, colIndex, data) {\n        let reportData = this.state.csvData\n        reportData[rowIndex][colIndex] = data.target.innerHTML\n    }\n\n    handleDelete(index) {\n        let data = this.fileData\n        data.splice(index, 1)\n        this.setState({\n            csvData: data\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"container\">\n                    <h1>Select CSV file</h1>\n                    <CSVReader\n                        cssClass=\"react-csv-input\"\n                        onFileLoaded={this.handleForce}\n                    />\n\n                    {\n                        this.headingData.length > 0 &&\n                        <button className=\"btn btn-raised btn-info mb-3 float-right\" onClick={this.handleExport.bind(this)}>Export</button>\n                    }{\n                        this.headingData.length > 0 &&\n                        <table className=\"table table-striped d-block overflow-auto\">\n                            <thead>\n                                <tr>\n                                    {\n                                        this.headingData.map((item, i) => {\n                                            return <th key={i} scope=\"col\">{item}</th>\n                                        })\n                                    }\n                                    <th key=\"001\" scope=\"col\">Action</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    this.state.csvData.map((res, i) => {\n                                        return (\n                                            <tr key={i} id={`tableRow${i}`}>\n                                                {\n                                                    res.map((item, index) => {\n                                                        return <td key={index}> <div id={`tableColoum${i}${index}`} suppressContentEditableWarning={true} contentEditable={true} onInput={this.handleDataChange.bind(this, i, index)}>{item}</div></td>\n                                                    })\n                                                }\n                                                {\n                                                    res.length > 1 ?\n                                                        <td><input type=\"button\" className=\"btn btn-danger\" value={'Delete'} onClick={this.handleDelete.bind(this, i)} /></td> : null\n\n                                                }\n                                            </tr>\n                                        )\n                                    })\n                                }\n                            </tbody>\n                        </table>\n                    }\n                    {\n                        this.fileData.length > 0 &&\n                        <div className=\"pagination-container\">\n                            <Pagination\n                                activePage={this.state.activePage}\n                                itemsCountPerPage={this.itemsPerPage}\n                                totalItemsCount={this.fileData.length}\n                                pageRangeDisplayed={5}\n                                onChange={this.handlePageChange.bind(this)}\n                            />\n                        </div>\n                    }\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport './App.css';\nimport ContactUs from './components/contact-us'\nimport Home from './components/home'\nimport {\n  HashRouter,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nclass App extends Component {\n\n  render() {\n    return (\n      <HashRouter basename=\"/\">\n        <nav className=\"navbar navbar-expand navbar-light bg-dark border-bottom\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <Link to=\"/\" className=\"nav-link text-white\">Home</Link>\n            </li>\n            <li className=\"nav-item active\">\n              <Link to=\"/contact-us\" className=\"nav-link text-white\">Contact Us</Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route exact path=\"/contact-us\">\n            <ContactUs />\n          </Route>\n        </Switch>\n      </HashRouter>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './style.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}